#!markdown

# Double pendulum: derivation and simulation

## 1. Theory

The core parameters we use to describe the system are:
- Angle and angular velocity of the first mass: $\theta_1, \dot{\theta}_1$
- Angle and angular velocity of the second mass **relative to the first mass**: $\theta_2, \dot{\theta}_2$

The "relative to the first mass" part will complicate calculation of the actual velocity of the 2nd mass.

Required constants:
- Masses: $m_1, m_2$
- Pendulum lengths: $l_1, l_2$
- Gravitational acceleration $g$

Visualisation of our double pendulum:

![](asset-double-pendulum.png)

We wish to describe the pendulum system using the state vector $\left[ \theta_1, \dot{\theta}_1, \theta_2, \dot{\theta}_2 \right]$. In order to simulate the system we can use the Runge-Kutta method. Implementation of the RK4 algorithm is provided by the MathNet.Numerics library. We still must provide the constant parameters, initial state vector at $t = 0$, and the derivative of the state vector. The derivative is typically presented as a function $f$ such that:

$$ f\left( \left[ \theta_1, \dot{\theta}_1, \theta_2, \dot{\theta}_2 \right] \right) = \left[ \dot{\theta}_1, \ddot{\theta}_1, \dot{\theta}_2, \ddot{\theta}_2 \right] $$

As you can see, two output parameters - $\dot{\theta}_1, \dot{\theta}_2$ - can be trivially deduced from the input vector. We must, however, find a way to calculate $\ddot{\theta}_1$ and $\ddot{\theta}_2$.

#!markdown

## 1.1. Derivation using Lagrangian mechanics

Lagrange mechanics 101:

$$\mathcal{L}(\theta, \dot{\theta}, t)
= E_\text{kinetic}(\theta, \dot{\theta}, t) - E_\text{potential}(\theta, \dot{\theta}, t)$$

$$\frac{d}{dt} \left( \frac{\partial\mathcal{L}}{\partial\dot{\theta}_i} \right)
= \frac{\partial\mathcal{L}}{\partial \theta_i}, \quad i = 1, 2$$

Checklist:
1. Calculate $E_\text{kinetic}$ with respect to state parameters.
2. Calculate $E_\text{potential}$ with respect to state parameters.
3. Calculate $\mathcal{L}$.
4. Write down 2 equations of motion and solve for $\ddot{\theta}_1, \ddot{\theta}_2$.

#!markdown

### 1.1.1. Kinetic energy

$$E_k = \frac{m_1 v_1^2}{2}  + \frac{m_2 v_2^2}{2}$$

The $v_1$ speed can be calculated as $v_1 = l_1 \dot{\theta_1}$. Calculating $v_2$ is a bit more challenging: $v_2$ is a speed of the second mass relative to the external observer, while $\theta_2$ is relative to the first mass.

Let's consider $\vec{v_2}$ to be a vector sum of $\vec{v_1}$ and $\vec{v_{1,2}}$ (velocity of mass 2. relative to mass 1.). Only the speed (magnitude of a velocity vector) is required, thus:

$$ \vec{v_2} = \vec{v_1} + \vec{v_{1,2}} $$

$$ v_2^2 = v_1^2 + 2v_1 v_{1,2}\cos{\left(\theta_2 - \theta_1\right)} + v_{1,2}^2 $$

$$ E_k = \frac{m_1 v_1^2}{2} + \frac{m_2}{2} \left( v_1^2 + 2v_1 v_{1,2}\cos{\left(\theta_2 - \theta_1\right)} + v_{1,2}^2 \right) $$

Given that $v_1 = l_1 \dot{\theta}_1$ and $v_{1,2} = l_2 \dot{\theta}_2$:

$$ E_k = \frac{1}{2}\left( m_1 + m_2 \right) l_1^2 \dot{\theta}_1^2
+ m_2 l_1 l_2 \dot{\theta}_1 \dot{\theta}_2 \cos{\left(\theta_2 - \theta_1\right)}
+ \frac{1}{2}m_2 l_2^2 \dot{\theta}_2^2 $$

#!markdown

### 1.1.2. Potential energy

$$ E_p = m_1gh_1 + m_2gh_2 $$

$$ E_p = -m_1gl_1 \cos{\theta_1} - m_2g \left(l_1 \cos{\theta_1} - l_2 \cos{\theta_2}\right) $$

$$ E_p = -\left( m_1+m_2 \right) gl_1 \cos{\theta_1} - m_2gl_2 \cos{\theta_2} $$

#!markdown

### 1.1.3. Lagrangian

$$ \mathcal{L} = E_k - E_p $$

$$ \mathcal{L} =
\frac{1}{2}\left(m_1+m_2\right)l_1^2 \dot{\theta}_1^2
+ m_2l_1l_2\dot{\theta}_1\dot{\theta}_2\cos{\left( \theta_2 - \theta_1 \right)}
+ \frac{1}{2}m_2l_2^2\dot{\theta}_2^2
+ \left(m_1+m_2\right)gl_1\cos{\theta_1}
+ m_2gl_2\cos{\theta_2} $$

#!markdown

### 1.1.4. Equations of motion

#!markdown

### 1.2. Solution

Let's calculate the necessary derivatives:

$$ \frac{\partial\mathcal{L}}{\partial \theta_1} = m_2l_1l_2\dot{\theta}_1\dot{\theta}_2\sin{\left(\theta_2 - \theta_1\right)} - \left(m_1+m_2\right)gl_1\sin{\theta_1} $$

$$ \frac{\partial\mathcal{L}}{\partial \theta_2} = -m_2l_1l_2\dot{\theta}_1\dot{\theta}_2\sin{\left(\theta_2-\theta_1\right)} - m_2gl_2\sin{\theta_2} $$

$$ \frac{\partial\mathcal{L}}{\partial\dot{\theta}_1} = \left(m_1+m_2\right)l_1^2\dot{\theta}_1 + m_2l_1l_2\dot{\theta}_2\cos{\left(\theta_2 - \theta_1\right)} $$

$$ \frac{\partial\mathcal{L}}{\partial\dot{\theta}_2} = m_2l_1l_2\dot{\theta}_1\cos{\left(\theta_2-\theta_1\right)} + m_2l_2^2\dot{\theta}_2 $$

Now, the equations of motion. They are defined as follows:

$$ \frac{d}{dt} \left( \frac{\partial\mathcal{L}}{\partial\dot{\theta}_1} \right)
= \frac{\partial\mathcal{L}}{\partial \theta_1} $$

$$ \frac{d}{dt} \left( \frac{\partial\mathcal{L}}{\partial\dot{\theta}_2} \right)
= \frac{\partial\mathcal{L}}{\partial \theta_2} $$


TODO bunch of transformations

#!markdown

## 1.2. Solution

$$ \ddot{\theta}_1 = \frac{PE - BCQ}{AE - B^2C^2} $$

$$ \ddot{\theta}_2 = \frac{AQ - BCP}{AE - B^2C^2} $$

where

$$ A = \left(m_1+m_2\right)l_1^2 $$

$$ B = m_2l_1l_2 $$

$$ C = \cos{\left( \theta_2 - \theta_1 \right)} $$

$$ D = \left( \dot{\theta}_2 - \dot{\theta}_1 \right) \sin{\left( \theta_2 - \theta_1 \right)} $$

$$ E = m_2 l_2^2 $$

$$ P = BD\dot{\theta}_2 + BS\dot{\theta}_1 \dot{\theta}_2 - \left(m_1+m_2\right)gl_1\sin{\theta_1} $$

$$ Q = BD\dot{\theta}_1 - BS\dot{\theta}_1\dot{\theta}_2 - m_2gl_2\sin{\theta_2} $$

$$ S = \sin{\left( \theta_2 - \theta_1 \right)} $$

#!markdown

# 2. Implementation

#!fsharp

#r "nuget: MathNet.Numerics.FSharp, 4.15.0"
#r "nuget: XPlot.Plotly, 4.0.6"
#r "nuget: XPlot.Plotly.Interactive, 4.0.6"

#!fsharp

open MathNet.Numerics.LinearAlgebra
open MathNet.Numerics.OdeSolvers
open XPlot.Plotly
open FSharp.Data.UnitSystems.SI.UnitNames

let g = 9.81<metre/second^2>
let l1 = 1.0<metre>
let l2 = 1.0<metre>
let m1 = 1.0<kilogram>
// let m2 = 0.333<kilogram>
let m2 = 0.350<kilogram>

let derivateL t (state: Vector<float>) =
    let B = m2 * l1 * l2
    let C = Math.Cos(state.[1] - state.[0])
    let BC = B * C
    let A = (m1 + m2) * l1 * l1
    let E = m2 * l2 * l2
    let AE_B2C2 = A * E - BC * BC

    let S = Math.Sin(state.[1] - state.[0])
    let D = (state.[3] - state.[2]) * S
    let P = B * D * state.[3] + B * S * state.[2] * state.[3] - (m1 + m2) * g * l1 * Math.Sin(state.[0]) * 1.0<second^2>
    let Q = B * D * state.[2] - B * S * state.[2] * state.[3] - m2 * g * l2 * Math.Sin(state.[1]) * 1.0<second^2>

    let d2theta1 = (P*E - BC*Q) / AE_B2C2
    let d2theta2 = (A*Q - BC*P) / AE_B2C2
    vector [
        state.[2]
        state.[3]
        d2theta1
        d2theta2
    ]

let y0 = vector [0.25; 0.0; 0.25; 0.0]
// let y0 = vector [3.14159/12.0; 0.88; 0.5; -8.0]  // that's a cool one
// let y0 = vector [0.0; 0.0; 0.0; 20.0]
let tFinal = 30.0
let dt = 0.005
let N = int (tFinal / dt)


let project (states: Vector<'a> seq) index =
    states |> Seq.map (fun state -> state.[index])

let result = RungeKutta.FourthOrder(y0, 0.0, tFinal, N, derivateL)
let ts = seq { for i in 1 .. N -> (float i) * dt } |> Seq.toList

#!fsharp

// Plot (x,y) positions of both masses.
let x1 = project result 0
        |> Seq.map (fun theta1 -> -l1 * Math.Sin(theta1))
let y1 = project result 0
        |> Seq.map (fun theta1 -> -l1 * Math.Cos(theta1))

let x2 = result
        |> Seq.map (fun state -> -l1 * Math.Sin(state.[0]) - l2 * Math.Sin(state.[1]))
let y2 = result
        |> Seq.map (fun state -> -l1 * Math.Cos(state.[0]) - l2 * Math.Cos(state.[1]))

[Scatter(x = x1, y = y1); Scatter(x = x2, y = y2)]
|> Chart.Plot
|> Chart.WithLabels [ "m1"; "m2" ]

#!fsharp

[
    Scatter(x = ts, y = project result 0, name = "θ1")
    // Scatter(x = ts, y = project result 1, name = "ω1")
    Scatter(x = ts, y = project result 2, name = "θ2")
    // Scatter(x = ts, y = project result 3, name = "ω2")
]
|> Chart.Plot
